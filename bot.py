import asyncio
import os
import random
import logging
import aiosqlite
import requests
from datetime import datetime
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from dotenv import load_dotenv




load_dotenv()


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
logging.basicConfig(level=logging.INFO)
DB_NAME = "finance.db"

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher(storage=MemoryStorage())


# =============================================
# –ö–õ–ê–í–ò–ê–¢–£–†–´
# =============================================

def main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(KeyboardButton(text="üìä –ú–æ–∏ —Ñ–∏–Ω–∞–Ω—Å—ã"))
    builder.row(
        KeyboardButton(text="üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç"),
                KeyboardButton(text="üí° –°–æ–≤–µ—Ç—ã"),
    )
    builder.row(KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"))
    return builder.as_markup(resize_keyboard=True)


def categories_keyboard():
    categories = ["üçî –ï–¥–∞", "üöï –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "üè† –ñ–∏–ª—å–µ",
                  "üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "üíä –ó–¥–æ—Ä–æ–≤—å–µ", "üëï –û–¥–µ–∂–¥–∞"]
    builder = ReplyKeyboardBuilder()
    for category in categories:
        builder.add(KeyboardButton(text=category))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)


def transaction_type_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üìà –î–æ—Ö–æ–¥"))
    builder.add(KeyboardButton(text="üìâ –†–∞—Å—Ö–æ–¥"))
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)


# =============================================
# –°–û–°–¢–û–Ø–ù–ò–Ø FSM
# =============================================

class AddTransaction(StatesGroup):
    TYPE = State()
    CATEGORY = State()
    AMOUNT = State()
    COMMENT = State()


# =============================================
# –ë–ê–ó–ê –î–ê–ù–ù–´–• (–ê–°–ò–ù–•–†–û–ù–ù–ê–Ø)
# =============================================

async def init_db():
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER UNIQUE NOT NULL,
                username TEXT,
                full_name TEXT,
                balance REAL DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        await db.execute('''
            CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                type TEXT CHECK(type IN ('income', 'expense')),
                category TEXT,
                amount REAL NOT NULL,
                comment TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
        ''')
        await db.commit()


async def register_user(user_id: int, full_name: str, username: str = None):
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute(
            "INSERT OR IGNORE INTO users (telegram_id, full_name, username) VALUES (?, ?, ?)",
            (user_id, full_name, username)
        )
        await db.commit()


async def add_transaction(user_id: int, data: dict):
    async with aiosqlite.connect(DB_NAME) as db:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await db.execute(
            """INSERT INTO transactions 
            (user_id, type, category, amount, comment) 
            VALUES (?, ?, ?, ?, ?)""",
            (user_id, data['type'], data['category'], data['amount'], data.get('comment', ''))
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        multiplier = 1 if data['type'] == 'income' else -1
        await db.execute(
            "UPDATE users SET balance = balance + ? WHERE telegram_id = ?",
            (multiplier * data['amount'], user_id)
        )
        await db.commit()


async def get_user_balance(user_id: int) -> float:
    async with aiosqlite.connect(DB_NAME) as db:
        cursor = await db.execute(
            "SELECT balance FROM users WHERE telegram_id = ?",
            (user_id,)
        )
        row = await cursor.fetchone()
        return row[0] if row else 0


async def get_monthly_summary(user_id: int):
    async with aiosqlite.connect(DB_NAME) as db:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Ö–æ–¥—ã/—Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        cursor = await db.execute('''
            SELECT 
                type,
                SUM(amount) as total,
                category
            FROM transactions
            WHERE 
                user_id = ? 
                AND strftime('%Y-%m', created_at) = strftime('%Y-%m', 'now')
            GROUP BY type, category
        ''', (user_id,))

        rows = await cursor.fetchall()
        return rows


# =============================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# =============================================

@dp.message(CommandStart())
async def cmd_start(message: Message):
    await register_user(
        user_id=message.from_user.id,
        full_name=message.from_user.full_name,
        username=message.from_user.username
    )

    await message.answer(
        "üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏—á–Ω—ã–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏:\n"
        "- üìä –£—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤\n"
        "- üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏\n"
        "- üìà –ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard(),
        parse_mode="HTML"
    )


@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "/balance - –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n"
        "/report - –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç\n"
        "/add - –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
        "‚Ä¢ –°–æ–≤–µ—Ç—ã –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±—é–¥–∂–µ—Ç–∞"
    )
    await message.answer(help_text, parse_mode="HTML")


@dp.message(F.text == "üìä –ú–æ–∏ —Ñ–∏–Ω–∞–Ω—Å—ã")
async def show_finances(message: Message):
    user_id = message.from_user.id
    balance = await get_user_balance(user_id)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü
    summary = await get_monthly_summary(user_id)

    if not summary:
        await message.answer(
            f"üíº –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{balance:.2f} ‚ÇΩ</b>\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü.",
            parse_mode="HTML"
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    income = 0
    expenses = 0
    report = ["<b>üìà –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü:</b>", ""]

    for row in summary:
        trans_type, total, category = row
        if trans_type == 'income':
            income += total
            report.append(f"‚¨ÜÔ∏è <b>{category}</b>: +{total:.2f} ‚ÇΩ")
        else:
            expenses += total
            report.append(f"‚¨áÔ∏è <b>{category}</b>: -{total:.2f} ‚ÇΩ")

    report.append("\nüìä <b>–ò—Ç–æ–≥–æ:</b>")
    report.append(f"–î–æ—Ö–æ–¥—ã: <b>+{income:.2f} ‚ÇΩ</b>")
    report.append(f"–†–∞—Å—Ö–æ–¥—ã: <b>-{expenses:.2f} ‚ÇΩ</b>")
    report.append(f"–ë–∞–ª–∞–Ω—Å: <b>{balance:.2f} ‚ÇΩ</b>")

    # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤
    if expenses > 0:
        savings_percent = (income - expenses) / income * 100 if income > 0 else 0
        report.append("\nüí° <b>–ê–Ω–∞–ª–∏–∑:</b>")
        report.append(f"–°–±–µ—Ä–µ–∂–µ–Ω–∏—è: <b>{savings_percent:.1f}%</b> –æ—Ç –¥–æ—Ö–æ–¥–æ–≤")

        if savings_percent < 20:
            report.append("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –ø–∏—Ç–∞–Ω–∏–µ –≤–Ω–µ –¥–æ–º–∞")

    await message.answer("\n".join(report), parse_mode="HTML")


@dp.message(F.text == "üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç")
async def exchange_rates(message: Message):
    rates = {
        "USD": 75.50,
        "EUR": 82.30,
        "CNY": 10.45,
        "GBP": 95.20
    }

    response = ["<b>üí± –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã:</b>",""]
    for currency, rate in rates.items():
        url = "https://v6.exchangerate-api.com/v6/09edf8b2bb246e1f801cbfba/latest/USD"
        try:
            response = requests.get(url)
            data = response.json()
            if response.status_code != 200:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç!")
                return
            usd_to_rub = data['conversion_rates']['RUB']
            eur_to_usd = data['conversion_rates']['EUR']
            cny_to_usd = data['conversion_rates']['CNY']
            gbp_to_usd = data['conversion_rates']['GBP']

            euro_to_rub =  usd_to_rub / eur_to_usd
            cny_to_rub = usd_to_rub / cny_to_usd
            gbp_to_rub = usd_to_rub / gbp_to_usd

            await message.answer(f"1 USD - {usd_to_rub:.2f}  RUB\n"
                                 f"1 EUR - {euro_to_rub:.2f}  RUB\n" 
                                 f"1 CNY - {cny_to_rub:.2f}  RUB\n"
                                 f"1 GBP - {gbp_to_rub:.2f}  RUB"
                                 )

        except:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

        response.append(f"{currency}/RUB: <b>{rate:.2f}</b>")

    response.append("\n<i>–ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 12:00 –ú–°–ö</i>")
    await message.answer("\n".join(response), parse_mode="HTML")


@dp.message(F.text == "üí° –°–æ–≤–µ—Ç—ã")
async def money_tips(message: Message):
    tips = [
        "üîπ <b>–ü—Ä–∞–≤–∏–ª–æ 50/30/20</b>\n 50% - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã\n30% - –∂–µ–ª–∞–Ω–∏—è\n20% - —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è",
        "üîπ <b>–ê–≤—Ç–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏—è</b>\n –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã 10% –æ—Ç –¥–æ—Ö–æ–¥–∞ –Ω–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç",
        "üîπ <b>–ê–Ω–∞–ª–∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫</b>\n –û—Ç–º–µ–Ω–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ (—Å—Ç—Ä–∏–º–∏–Ω–≥–∏, —Å–µ—Ä–≤–∏—Å—ã)",
        "üîπ <b>–ö—ç—à–±–µ–∫</b>\n –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—Ä—Ç—ã —Å –∫—ç—à–±–µ–∫–æ–º –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ç—Ä–∞—Ç",
        "üîπ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n –°–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–µ—Ä–µ–¥ –ø–æ—Ö–æ–¥–æ–º –≤ –º–∞–≥–∞–∑–∏–Ω"
    ]

    await message.answer(
        random.choice(tips),
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ï—â—ë —Å–æ–≤–µ—Ç", callback_data="another_tip")]
        ])
    )


@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é")
async def add_transaction_start(message: Message, state: FSMContext):
    await state.set_state(AddTransaction.TYPE)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=transaction_type_keyboard()
    )


# =============================================
# FSM: –î–û–ë–ê–í–õ–ï–ù–ò–ï –û–ü–ï–†–ê–¶–ò–ò
# =============================================

@dp.message(AddTransaction.TYPE)
async def process_type(message: Message, state: FSMContext):
    if message.text not in ["üìà –î–æ—Ö–æ–¥", "üìâ –†–∞—Å—Ö–æ–¥"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
        return

    await state.update_data(
        type="income" if message.text == "üìà –î–æ—Ö–æ–¥" else "expense"
    )
    await state.set_state(AddTransaction.CATEGORY)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_keyboard())


@dp.message(AddTransaction.CATEGORY)
async def process_category(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if message.text.startswith("/"):
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        return

    await state.update_data(category=message.text)
    await state.set_state(AddTransaction.AMOUNT)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:", reply_markup=types.ReplyKeyboardRemove())


@dp.message(AddTransaction.AMOUNT)
async def process_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
        if amount <= 0:
            raise ValueError
    except (ValueError, TypeError):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)")
        return

    await state.update_data(amount=amount)
    await state.set_state(AddTransaction.COMMENT)
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip):")


@dp.message(AddTransaction.COMMENT)
async def process_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    data["comment"] = message.text

    await add_transaction(message.from_user.id, data)
    await state.clear()

    operation_type = "–¥–æ—Ö–æ–¥" if data["type"] == "income" else "—Ä–∞—Å—Ö–æ–¥"
    await message.answer(
        f"‚úÖ {operation_type.capitalize()} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "
        f"<b>{data['category']}</b> –Ω–∞ —Å—É–º–º—É "
        f"<b>{data['amount']:.2f} ‚ÇΩ</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
        parse_mode="HTML",
        reply_markup=main_keyboard()
    )


# –ü—Ä–æ–ø—É—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@dp.message(Command("skip"), AddTransaction.COMMENT)
async def skip_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.clear()

    await add_transaction(message.from_user.id, data)
    operation_type = "–¥–æ—Ö–æ–¥" if data["type"] == "income" else "—Ä–∞—Å—Ö–æ–¥"
    await message.answer(
        f"‚úÖ {operation_type.capitalize()} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "
        f"<b>{data['category']}</b> –Ω–∞ —Å—É–º–º—É "
        f"<b>{data['amount']:.2f} ‚ÇΩ</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
        parse_mode="HTML",
        reply_markup=main_keyboard()
    )


# =============================================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# =============================================

async def main():
    await init_db()
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())