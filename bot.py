import asyncio
import os
import random
import logging
import aiosqlite
import aiohttp  # –ó–∞–º–µ–Ω—è–µ–º requests –Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
from datetime import datetime
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from dotenv import load_dotenv

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

DB_NAME = "finance.db"
EXCHANGE_API_KEY = os.getenv("EXCHANGE_API_KEY")  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–∞

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher(storage=MemoryStorage())


# =============================================
# –ö–õ–ê–í–ò–ê–¢–£–†–´
# =============================================

def main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(KeyboardButton(text="üìä –ú–æ–∏ —Ñ–∏–Ω–∞–Ω—Å—ã"))
    builder.row(
        KeyboardButton(text="üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç"),
        KeyboardButton(text="üí° –°–æ–≤–µ—Ç—ã"),
    )
    builder.row(KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"))
    return builder.as_markup(resize_keyboard=True)


def categories_keyboard():
    categories = ["üçî –ï–¥–∞", "üöï –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "üè† –ñ–∏–ª—å–µ",
                  "üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "üíä –ó–¥–æ—Ä–æ–≤—å–µ", "üëï –û–¥–µ–∂–¥–∞"]
    builder = ReplyKeyboardBuilder()
    for category in categories:
        builder.add(KeyboardButton(text=category))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)


def transaction_type_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üìà –î–æ—Ö–æ–¥"))
    builder.add(KeyboardButton(text="üìâ –†–∞—Å—Ö–æ–¥"))
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)


# =============================================
# –°–û–°–¢–û–Ø–ù–ò–Ø FSM
# =============================================

class AddTransaction(StatesGroup):
    TYPE = State()
    CATEGORY = State()
    AMOUNT = State()
    COMMENT = State()


# =============================================
# –ë–ê–ó–ê –î–ê–ù–ù–´–• (–ê–°–ò–ù–•–†–û–ù–ù–ê–Ø)
# =============================================

async def init_db():
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER UNIQUE NOT NULL,
                username TEXT,
                full_name TEXT,
                balance REAL DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        await db.execute('''
            CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                type TEXT CHECK(type IN ('income', 'expense')),
                category TEXT,
                amount REAL NOT NULL,
                comment TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
        ''')
        await db.commit()


async def register_user(user_id: int, full_name: str, username: str = None):
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute(
            "INSERT OR IGNORE INTO users (telegram_id, full_name, username) VALUES (?, ?, ?)",
            (user_id, full_name, username)
        )
        await db.commit()


async def add_transaction(user_id: int, data: dict):
    async with aiosqlite.connect(DB_NAME) as db:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await db.execute(
            """INSERT INTO transactions 
            (user_id, type, category, amount, comment) 
            VALUES (?, ?, ?, ?, ?)""",
            (user_id, data['type'], data['category'], data['amount'], data.get('comment', ''))
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        multiplier = 1 if data['type'] == 'income' else -1
        await db.execute(
            "UPDATE users SET balance = balance + ? WHERE telegram_id = ?",
            (multiplier * data['amount'], user_id)
        )
        await db.commit()


async def get_user_balance(user_id: int) -> float:
    async with aiosqlite.connect(DB_NAME) as db:
        cursor = await db.execute(
            "SELECT balance FROM users WHERE telegram_id = ?",
            (user_id,)
        )
        row = await cursor.fetchone()
        return row[0] if row else 0


async def get_monthly_summary(user_id: int):
    async with aiosqlite.connect(DB_NAME) as db:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Ö–æ–¥—ã/—Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        cursor = await db.execute('''
            SELECT 
                type,
                SUM(amount) as total,
                category
            FROM transactions
            WHERE 
                user_id = ? 
                AND strftime('%Y-%m', created_at) = strftime('%Y-%m', 'now')
            GROUP BY type, category
        ''', (user_id,))

        rows = await cursor.fetchall()
        return rows


# =============================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================================

async def send_transaction_confirmation(message: Message, data: dict):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    operation_type = "–¥–æ—Ö–æ–¥" if data["type"] == "income" else "—Ä–∞—Å—Ö–æ–¥"
    await message.answer(
        f"‚úÖ {operation_type.capitalize()} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "
        f"<b>{data['category']}</b> –Ω–∞ —Å—É–º–º—É "
        f"<b>{data['amount']:.2f} ‚ÇΩ</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
        parse_mode="HTML",
        reply_markup=main_keyboard()
    )


async def get_exchange_rates():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
    url = f"https://v6.exchangerate-api.com/v6/{EXCHANGE_API_KEY}/latest/USD"

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, timeout=10) as response:
                if response.status != 200:
                    logger.error(f"–û—à–∏–±–∫–∞ API: {response.status}")
                    return None

                data = await response.json()

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
                if data.get('result') != 'success':
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API: {data.get('error-type', 'unknown')}")
                    return None

                return data['conversion_rates']

        except (aiohttp.ClientError, asyncio.TimeoutError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
            return None


# =============================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# =============================================

@dp.message(CommandStart())
async def cmd_start(message: Message):
    try:
        await register_user(
            user_id=message.from_user.id,
            full_name=message.from_user.full_name,
            username=message.from_user.username
        )

        await message.answer(
            "üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫</b>\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏—á–Ω—ã–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏:\n"
            "- üìä –£—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤\n"
            "- üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏\n"
            "- üìà –ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "/balance - –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n"
        "/report - –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç\n"
        "/add - –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
        "‚Ä¢ –°–æ–≤–µ—Ç—ã –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±—é–¥–∂–µ—Ç–∞"
    )
    await message.answer(help_text, parse_mode="HTML")


@dp.message(F.text == "üìä –ú–æ–∏ —Ñ–∏–Ω–∞–Ω—Å—ã")
async def show_finances(message: Message):
    try:
        user_id = message.from_user.id
        balance = await get_user_balance(user_id)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü
        summary = await get_monthly_summary(user_id)

        if not summary:
            await message.answer(
                f"üíº –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{balance:.2f} ‚ÇΩ</b>\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü.",
                parse_mode="HTML"
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        income = 0
        expenses = 0
        report = ["<b>üìà –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü:</b>", ""]

        for row in summary:
            trans_type, total, category = row
            if trans_type == 'income':
                income += total
                report.append(f"‚¨ÜÔ∏è <b>{category}</b>: +{total:.2f} ‚ÇΩ")
            else:
                expenses += total
                report.append(f"‚¨áÔ∏è <b>{category}</b>: -{total:.2f} ‚ÇΩ")

        report.append("\nüìä <b>–ò—Ç–æ–≥–æ:</b>")
        report.append(f"–î–æ—Ö–æ–¥—ã: <b>+{income:.2f} ‚ÇΩ</b>")
        report.append(f"–†–∞—Å—Ö–æ–¥—ã: <b>-{expenses:.2f} ‚ÇΩ</b>")
        report.append(f"–ë–∞–ª–∞–Ω—Å: <b>{balance:.2f} ‚ÇΩ</b>")

        # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤
        if expenses > 0:
            savings_percent = (income - expenses) / income * 100 if income > 0 else 0
            report.append("\nüí° <b>–ê–Ω–∞–ª–∏–∑:</b>")
            report.append(f"–°–±–µ—Ä–µ–∂–µ–Ω–∏—è: <b>{savings_percent:.1f}%</b> –æ—Ç –¥–æ—Ö–æ–¥–æ–≤")

            if savings_percent < 20:
                report.append("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –ø–∏—Ç–∞–Ω–∏–µ –≤–Ω–µ –¥–æ–º–∞")

        await message.answer("\n".join(report), parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_finances: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")


@dp.message(F.text == "üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç")
async def exchange_rates(message: Message):
    try:
        rates = await get_exchange_rates()

        if not rates:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã
        currencies = {
            "USD": "üá∫üá∏ –î–æ–ª–ª–∞—Ä –°–®–ê",
            "EUR": "üá™üá∫ –ï–≤—Ä–æ",
            "CNY": "üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å",
            "GBP": "üá¨üáß –§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤"
        }

        response = ["<b>üí± –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –∫ USD:</b>\n"]

        for code, name in currencies.items():
            if code in rates:
                rate = rates[code]
                response.append(f"{name}: <b>{rate:.2f}</b>")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—É—Ä—Å —Ä—É–±–ª—è
        if "RUB" in rates:
            rub_rate = rates["RUB"]
            response.append(f"\nüá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å: <b>{rub_rate:.2f}</b>")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
            for code in ["EUR", "GBP", "CNY"]:
                if code in rates:
                    cross_rate = rub_rate / rates[code]
                    response.append(f"{currencies[code]} –≤ —Ä—É–±–ª—è—Ö: <b>{cross_rate:.2f}</b>")

        response.append("\n<i>–ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 12:00 –ú–°–ö</i>")
        await message.answer("\n".join(response), parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ exchange_rates: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç.")


@dp.message(F.text == "üí° –°–æ–≤–µ—Ç—ã")
async def money_tips(message: Message):
    tips = [
        "üîπ <b>–ü—Ä–∞–≤–∏–ª–æ 50/30/20</b>\n50% - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã\n30% - –∂–µ–ª–∞–Ω–∏—è\n20% - —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è",
        "üîπ <b>–ê–≤—Ç–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏—è</b>\n–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã 10% –æ—Ç –¥–æ—Ö–æ–¥–∞ –Ω–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç",
        "üîπ <b>–ê–Ω–∞–ª–∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫</b>\n–û—Ç–º–µ–Ω–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ (—Å—Ç—Ä–∏–º–∏–Ω–≥–∏, —Å–µ—Ä–≤–∏—Å—ã)",
        "üîπ <b>–ö—ç—à–±–µ–∫</b>\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—Ä—Ç—ã —Å –∫—ç—à–±–µ–∫–æ–º –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ç—Ä–∞—Ç",
        "üîπ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n–°–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–µ—Ä–µ–¥ –ø–æ—Ö–æ–¥–æ–º –≤ –º–∞–≥–∞–∑–∏–Ω",
        "üîπ <b>–≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –ñ–ö–•</b>\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å—á–µ—Ç—á–∏–∫–∏ –≤–æ–¥—ã –∏ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—é—â–∏–µ –ª–∞–º–ø—ã",
        "üîπ <b>–ü—Ä–∞–≤–∏–ª–æ 24 —á–∞—Å–æ–≤</b>\n–ü–µ—Ä–µ–¥ –∫—Ä—É–ø–Ω–æ–π –ø–æ–∫—É–ø–∫–æ–π –≤—ã–∂–¥–∏—Ç–µ 24 —á–∞—Å–∞"
    ]

    try:
        await message.answer(
            random.choice(tips),
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ï—â—ë —Å–æ–≤–µ—Ç", callback_data="another_tip")]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ money_tips: {str(e)}")
        await message.answer("üí° –°–æ–≤–µ—Ç: –í—Å–µ–≥–¥–∞ –∏–º–µ–π—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –ø–æ–¥—É—à–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!")


@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é")
async def add_transaction_start(message: Message, state: FSMContext):
    try:
        await state.set_state(AddTransaction.TYPE)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:",
            reply_markup=transaction_type_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_transaction_start: {str(e)}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# =============================================
# FSM: –î–û–ë–ê–í–õ–ï–ù–ò–ï –û–ü–ï–†–ê–¶–ò–ò (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫)
# =============================================

@dp.message(AddTransaction.TYPE)
async def process_type(message: Message, state: FSMContext):
    try:
        if message.text not in ["üìà –î–æ—Ö–æ–¥", "üìâ –†–∞—Å—Ö–æ–¥"]:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
            return

        await state.update_data(
            type="income" if message.text == "üìà –î–æ—Ö–æ–¥" else "expense"
        )
        await state.set_state(AddTransaction.CATEGORY)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_type: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        await state.clear()


@dp.message(AddTransaction.CATEGORY)
async def process_category(message: Message, state: FSMContext):
    try:
        if message.text.startswith("/"):
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            return

        await state.update_data(category=message.text)
        await state.set_state(AddTransaction.AMOUNT)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:", reply_markup=types.ReplyKeyboardRemove())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_category: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        await state.clear()


@dp.message(AddTransaction.AMOUNT)
async def process_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
        if amount <= 0:
            await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
            return
    except (ValueError, TypeError):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)")
        return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_amount: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã.")
        await state.clear()
        return

    try:
        await state.update_data(amount=amount)
        await state.set_state(AddTransaction.COMMENT)
        await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip):")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_amount (update): {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã.")
        await state.clear()


@dp.message(AddTransaction.COMMENT)
async def process_comment(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        data["comment"] = message.text

        await add_transaction(message.from_user.id, data)
        await state.clear()
        await send_transaction_confirmation(message, data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_comment: {str(e)}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()


# –ü—Ä–æ–ø—É—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@dp.message(Command("skip"), AddTransaction.COMMENT)
async def skip_comment(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        await state.clear()

        await add_transaction(message.from_user.id, data)
        await send_transaction_confirmation(message, data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ skip_comment: {str(e)}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()


# =============================================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# =============================================

async def main():
    await init_db()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")